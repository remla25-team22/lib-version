name: Test, Publish & Bump Version (.NET + GitHub Packages)

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore lib-version/lib-version.csproj

      - name: Run tests
        run: dotnet test lib-version/lib-version.csproj --configuration Release

      - name: Read version from VERSION.txt
        id: version
        run: |
          VERSION=$(cat VERSION.txt)
          if [[ -z "$VERSION" ]]; then
            echo "VERSION.txt is empty. Aborting."
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          VERSION_CLEANED="${VERSION#v}"
          echo "VERSION_CLEANED=$VERSION_CLEANED" >> $GITHUB_ENV
          echo "Current version: $VERSION (cleaned: $VERSION_CLEANED)"

      - name: Tag release if not exists
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/${{ env.VERSION }}"; then
            echo "Tag already exists. Skipping release."
            exit 0
          fi
          git tag ${{ env.VERSION }}
          git push origin ${{ env.VERSION }}

      - name: Publish NuGet package to GitHub Packages
        run: |
          dotnet pack lib-version/lib-version.csproj --no-restore --configuration Release -p:Version=${{ env.VERSION_CLEANED }} --output .
          dotnet nuget push *.nupkg --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate --no-symbols
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump to next patch pre-release version
        run: |
          VERSION=${{ env.VERSION }}
          IFS='.' read -r MAJOR MINOR PATCH <<< "${VERSION#v}"
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="v${MAJOR}.${MINOR}.${NEXT_PATCH}-pre"
          echo "$NEXT_VERSION" > VERSION.txt
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Commit and push version bump
        run: |
          git add VERSION.txt
          git commit -m "Bump version to ${{ env.NEXT_VERSION }} after release ${{ env.VERSION }}"
          git push origin main || echo "Push to main failed. Check if branch protection blocks direct commits."
